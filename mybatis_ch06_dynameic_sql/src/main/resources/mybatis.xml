<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--指定properties文件的位置，从类路径根目录开始找文件-->
    <properties resource="jdbc.properties"/>

    <!--settings:空值mybatis全局行为-->
    <settings>
        <!--
            设置mybatis输出日志
            logImpl：表示要控制日志
            STDOUT_LOGGING：表示把日志输出到控制台的
        -->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
    </settings>
    <!--定义别名-->
    <typeAliases>
        <!--
            第一种方式
            可以指定一个类型一个自定义别名
            type：自定义类型的全限定名
            alias：自定义别名(短小容易记忆的)
        -->
<!--        <typeAlias type="com.bjpowernode.entity.Student" alias="stu"/>-->
        <!--
            第二种方式
            <package> name 包名，这个包中所有的类，类名就是别名（类名不区分大小写）
        -->
        <package name="com.bjpowernode.entity"/>
        <package name="com.bjpowernode.vo"/>
    </typeAliases>

    <!--配置插件，插件是加载环境配置之前的-->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor"/>
    </plugins>

    <!--环境配置：数据库的连接信息
        default：必须和某个environment的id值一样
        告诉mybatis使用哪个数据库的连接信息，也就是访问哪个数据库
    -->
    <environments default="sqlserver">
        <!--environment：一个数据库信息的配置，环境
            id：一个唯一值，自定义，表示环境的名称
        -->
        <environment id="sqlserver">
            <!--transactionManager：mybatis的事务类型
                type(值有两个)：JDBC（表示使用jdbc中的Connection对象的commit，rollback做事务处理）
            -->
            <!--
                transactionManager：mybatis提交事务，回滚事务的方式
                type：事务的处理类型
                    1）JDBC：表示mybatis底层是调用JDBC中的Connection对象的，commit，rollback
                    2）MANAGED：表示mybatis的事务处理委托给其他的容器（一个服务器软件，一个框架（Spring））
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource：表示数据源，连接数据库的
                    type：表是数据源的类型，POOLED表示使用连接池
            -->
            <!--
                dataSource：表示数据源，java体系中，规定实现了javax.sql.DataSource接口的都是数据源
                            数据源表示Connection对象的连接
                type：指定数据源的类型
                        1）POOLED：使用连接池，mybatis会创建PooledDataSource类
                        2）UPOOLED（没有池的概念一般不会使用）：不使用连接池，在每次执行sql语句，先创建连接，再执行sql，再关闭连接
                                    mybatis会创建一个UnPooledDataSource，管理Connection对象的使用
                        3）JNDI：java命名和目录服务（类似于windows的注册表，服务的启动的使用，很老了一般不使用了，知道名词即可，使用比较复杂）
            -->
            <dataSource type="POOLED">
                <!--driver,url,username,password是固定的不能自定义-->
                <!--数据库的驱动名-->
                <property name="driver" value="${jdbc.driver}"/>
                <!--连接数据库的url字符串-->
                <property name="url" value="${jdbc.url}"/>
                <!--访问数据库的用户名-->
                <property name="username" value="${jdbc.username}"/>
                <!--访问数据库的密码-->
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--sql mapper（sql映射文件）的位置-->
    <mappers>
        <!--一个mapper标签指定一个文件的位置
            从类路径开始的路径信息，target/classes（类路径）
            <mappers>标签下可以添加多个<mapper>标签
        -->
        <!--第一种方式  ：指定多个mapper文件，一个mapper文件需要一个<mapper>的标签去定义路径-->
<!--        <mapper resource="com/bjpowernode/dao/StudentDao.xml"/>-->

        <!--
            第二种方式：使用包名
            name：xml文件（mapper映射文件）所在的包名，这个包中所有xml映射文件一次都能加载给mybatis
            package标签和mapper标签一样可以写多个
            使用package标签的要求
                1、mapper文件名称需要和接口名称一模一样，区分大小写
                2、mapper文件和dao接口需要在同一目录下
        -->
        <package name="com.bjpowernode.dao"/>
<!--        <package name="com.bjpowernode.dao2"/>-->
<!--        <package name="com.bjpowernode.dao3"/>-->
    </mappers>
</configuration>

        <!--
    mybatis的主配置文件：主要定义了数据库的配置信息，sql映射文件

    1、约束文件
    <!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
    mybatis-3-config.dtd  约束文件的名称

    2、configuration  根标签

-->