<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

  <display-name>Archetype Created Web Application</display-name>

  <!--
      声明，注册springmvc的核心对象DispatcherServlet
      需要在tomcat服务器启动后，创建DispatcherServlet对象的实例
      为什么要创建DispatcherServlet对象的实例呢？
      因为DispatcherServlet在他的创建过程中，会同时创建springmvc容器对象，
      读取springmvc的配置文件，把这个配置文件中对象都创建好，当用户发起请求时候就可以直接使用对象了。不需要用户访问才取创建

      servlet的初始化会执行init()方法，DispatcherServlet在init()中{
        //创建容器，读取配置文件
        WebApplicationContext context = new ClassPathXmlApplicationContext("springmvc.xml");
        //把容器对象放入到ServletContext中
        getServletContext().setAttribute(key,context)
      }
      启动tomcat报错，读取这个文件[/WEB-INF/springmvc-servlet.xml]
      springmvc创建容器对象时候，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml
  -->
  <!--springmvc配置的主要配置方式
      1、指定servlet的全限定名称
      2、指定自己的springmvc配置文件的位置以及名称（<param-value>classpath:springmvc.xml</param-value>表示类路径下的某一个文件）
      3、指定创建Servlet的创建时间以及顺序为1（一定必须去指定）【因为需要在中央调度器启动的时候要把springmvc容器创建出来，要把文件中的对象创建好，只有这样请求才能被处理】
  -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <!--自定义springmvc读取的配置文件的位置-->
    <init-param>
      <!--springmvc的配置文件的位置的属性-->
      <param-name>contextConfigLocation</param-name>
      <!--指定自定义文件位置和文件名-->
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>

    <!--tomcat启动后，创建Servlet对象
        load-on-startup：表示tomcat启动后创建对象的顺序。他的值是整数，数值越小，tomcat创建对象的时间越早，数值是大于等于0的证书，0也很少用
    -->
    <!--启动时进行加载-->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <!--
        使用框架的时候，url-pattern可以使用两种值
        1、使用扩展名的方式，语法*.xxxx,  xxxx是自定义的扩展名。  常用的方式由*.do , *.action , *.mvc等等
          http://localhost:8080/springmvc/some.do
          http://localhost:8080/springmvc/orther.do

        2、使用斜杠 ： "/"
           当你的项目中使用了斜杠 " / "，他会替代tomcat中的default
           导致所有的静态资源都给DispatcherServlet（中央调度器）处理，默认情况下DispatcherServlet（中央调度器）没有处理静态资源的能力。
           没有控制器对象能处理静态资源的访问，所以静态资源（html、js、图片、css）都不能访问都是404
        动态资源some.do是可以访问的，因为我们程序中由MyController控制器对象由于some.do相对应的uri地址，能处理some.do请求
    -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!--注册声明过滤器，解决post请求乱码问题-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--设置项目中使用的字符编码-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <!--强制请求对象（HttpServletRequest）使用encoding编码的值-->
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <!--强制应答对象（HttpServletResponse）使用encoding编码的值-->
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <!--/*：表示强制所有的请求先通过过滤器（characterEncodingFilter）处理-->
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>

