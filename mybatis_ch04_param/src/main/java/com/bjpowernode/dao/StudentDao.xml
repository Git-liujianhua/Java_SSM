<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bjpowernode.dao.StudentDao">


    <!--
        parameterType：dao接口中方法参数的数据类型
            parameterType他的值是Java的数据类型全限定名称或者是mybatis定义的别名（别名不是我们自己创建的是mybatis自己定义好的）
            例如：parameterType="java.lang.Integer" 是全限定名称
                 parameterType="int" 是mybatis定义的别名
            注意：parameterType不是强制的，mybatis通过反射机制能够发现接口参数的数据类型
                 所以可以没有不写，开发中一般把我们也不写这个parameterType属性

         mybatis的内部执行sql的机制
         PreparedStatement对象执行sql语句操作数据库效率高、速度快、更安全没有sql注入的风险，建议用#占位符的方式
        使用#{}之后，mybatis执行sql是使用JDBC中的PreparedStatement对象
        有mybatis执行下面的代码：
            1、mybatis创建Connection、PreparedStatement对象
            String sql = "select id,name,email,age from t_student where id = ?";  当mybatis遇到#号后自动转为?占位符
            通过连接对象创建PreparedStatement对象
            PreparedStatement pst = conn.preparedStatement(sql)
            传值
            pst.setInt(1,1001);（占位符，值）
            2、Student student = dao.selectStudentById(1004);相当于下面的步骤
            执行sql封装为 resultType="com.bjpowernode.entity.Student"这个对象
            ResultSet rs = pst.executeQuery();
            Student student = null;
            while(rs.next()){
                //从数据库中取表的一行数据，存到一个Java对象属性中
                student = new Student();
                student.setId(rs.getInt("id"));
                student.setName(rs.getString("name"));
                student.setEmail(rs.getString("email"));
                student.setAge(rs.getInt("age"))
            }
            return student; //赋给了dao方法调用的返回值

            只要把sql语句和转换的信息给mybatis就可以开始做上面的操作，创建连接，访问数据库，操作数据，由mybatis创建对象给属性赋值
            mybatis创建对象是要用Javabean里的无参构造取创建对象和get、set方法才能正确赋值
            mybatis的sql语句中的一个#{}相当于对应的一个占位符'?'
    -->
    <select id="selectStudentById" parameterType="int" resultType="com.bjpowernode.entity.Student">
        select id,name,email,age from t_student where id = ${id}
    </select>

    <!--多个参数，使用@Param命名-->
    <select id="selectMultiParam" resultType="com.bjpowernode.entity.Student">
        select id,name,email,age from t_student where name = #{myname} or age = #{myage}
    </select>

    <!--多个参数，使用Java对象的属性值，作为参数的实际值
        使用对象的语法格式：#{属性名,javaType=类型名称（Java数据类型的全限定名称）,jdbcType=数据类型}  完整的语法格式，很少用
                        javaType：指Java中的属性数据类型
                        jdbcType：再数据库中的数据类型
                        例如：#{paramName,javaType=java.lang.String,jdbcType=VARCHAR}

        我们使用的简化方式：#{属性名}，javaType，jdbcType的值mybatis反射能获取，不用提供
        javaBean对象的属性来代表值

    -->
<!--    <select id="selectMultiObject" resultType="com.bjpowernode.entity.Student">-->
<!--        select id,name,email,age from t_student -->
<!--                    where name = #{paramName,javaType=java.lang.String,jdbcType=VARCHAR} -->
<!--                    or age = #{paramAge,javaType=java.lang.Integer,jdbcType=INTEGER}-->
<!--    </select>-->

    <select id="selectMultiObject" resultType="com.bjpowernode.entity.Student">
        select id,name,email,age from t_student where name = #{paramName} or age = #{paramAge}
    </select>

    <select id="selectMultiStudent" resultType="com.bjpowernode.entity.Student">
        select id,name,email,age from t_student where name = #{name} or age = #{age}
    </select>

    <!--多个参数使用位置-->
    <select id="selectMultiPosition" resultType="com.bjpowernode.entity.Student">
        select id,name,email,age from t_student where name = #{arg0} or age = #{arg1}
    </select>

    <!--多个参数使用map，使用语法  #{map的key}
        name（列） = #{name（map的key）}
        缺陷：
            1、sql语句中的参数是map中的key，key来自于执行代码是map中的定义，太具有随意性，一改key都参数就要改，改的地方太多不方便
            2、光看方法的定义中的参数map，无法确定有几个参数，无法确定类型
            3、map传参可读性差，看到map什么信息都得不到
            阿里的Java开发手册明确指明接口方法等传参时不要用map
    -->
    <select id="selectMultiByMap" resultType="com.bjpowernode.entity.Student">
        select id,name,email,age from t_student where name = #{myname} or age = #{myage}
    </select>
</mapper>

